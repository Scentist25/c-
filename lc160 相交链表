/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //如果两个链表相交，那么相交点之后的长度是相同的
 //我们需要做的事情是，让两个链表从同距离末尾同等距离的位置开始遍历。这个位置只能是较短链表的头结点位置。
class Solution {                                                        
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
       // 1.找到长度差
       ListNode *ret=NULL;
       ListNode *A=headA;
       ListNode *B=headB;
       int la=0,lb=0;
       while(A){
           la++;
           A=A->next;
       }
       while(B){
           lb++;
           B=B->next;
       }
        // 2.找到两个链表的遍历起点
       if(la>lb){
           la=la-lb;
           A=headA;
            B=headB;
            for(int i=0;i<la;i++){
           A=A->next;
       }
       }
       else{
           la=lb-la;
            B=headB;
             A=headA;
            for(int i=0;i<la;i++){
           B=B->next;
       }
      
       }
        // 3.遍历
        while(A&&B){
           if(A==B){               //判断相交节点是判断A==B而不是A->val==N->val
               if(!ret){
                   ret=A;
               }
           }
           else{
               ret=NULL;
           }
           A=A->next;
           B=B->next;
       }
    return ret;
        
    }
};
